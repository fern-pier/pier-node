/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { PierApi } from "@fern-api/pier";
import * as core from "../../../../core";

export const Offer: core.serialization.Schema<serializers.Offer.Raw, PierApi.Offer> = core.serialization
    .union("type", {
        line_of_credit: core.serialization.lazyObject(async () => (await import("../../..")).LineOfCreditOffer),
        loan: core.serialization.lazyObject(async () => (await import("../../..")).LoanOffer),
    })
    .transform<PierApi.Offer>({
        parse: (value) => {
            switch (value.type) {
                case "line_of_credit":
                    return PierApi.Offer.lineOfCredit(value);
                case "loan":
                    return PierApi.Offer.loan(value);
                default:
                    return PierApi.Offer._unknown(value);
            }
        },
        json: (value) => value as any,
    });

export declare namespace Offer {
    type Raw = Offer.LineOfCredit | Offer.Loan;

    interface LineOfCredit extends serializers.LineOfCreditOffer.Raw {
        type: "line_of_credit";
    }

    interface Loan extends serializers.LoanOffer.Raw {
        type: "loan";
    }
}
