/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import { PierApi } from "@fern-api/pier";
import * as core from "../../../../core";

export const Borrower: core.serialization.Schema<serializers.Borrower.Raw, PierApi.Borrower> = core.serialization
    .union("type", {
        business: core.serialization.lazyObject(async () => (await import("../../..")).BusinessBorrower),
        consumer: core.serialization.lazyObject(async () => (await import("../../..")).ConsumerBorrower),
    })
    .transform<PierApi.Borrower>({
        parse: (value) => {
            switch (value.type) {
                case "business":
                    return PierApi.Borrower.business(value);
                case "consumer":
                    return PierApi.Borrower.consumer(value);
                default:
                    return PierApi.Borrower._unknown(value);
            }
        },
        json: (value) => value as any,
    });

export declare namespace Borrower {
    type Raw = Borrower.Business | Borrower.Consumer;

    interface Business extends serializers.BusinessBorrower.Raw {
        type: "business";
    }

    interface Consumer extends serializers.ConsumerBorrower.Raw {
        type: "consumer";
    }
}
