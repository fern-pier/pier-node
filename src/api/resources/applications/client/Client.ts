/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { PierApi } from "@fern-api/pier";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.PierApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

/**
 * Applications represent the credit application for a borrower.
 * Applications must be created for a given borrower, and one borrower can have many applications.
 * Once an application is created, it must either be approved or rejected.
 * Creating a borrower (or referencing an existing one) is the first step in the Pier credit origination process.
 *
 */
export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * @throws {PierApi.InvalidInputError}
     * @throws {PierApi.BorrowerNotFoundError}
     */
    public async create(request: PierApi.CreateApplicationRequest): Promise<PierApi.Application> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PierApiEnvironment.Production, "/applications/"),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.applications.create.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.applications.create.Response.parse(
                _response.body as serializers.applications.create.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new PierApi.InvalidInputError(
                        await serializers.InvalidInputError.parse(
                            _response.error.body as serializers.InvalidInputError.Raw
                        )
                    );
                case 404:
                    throw new PierApi.BorrowerNotFoundError(
                        await serializers.BorrowerNotFoundError.parse(
                            _response.error.body as serializers.BorrowerNotFoundError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {PierApi.InvalidInputError}
     * @throws {PierApi.BorrowerNotFoundError}
     */
    public async approve(
        applicationId: PierApi.ApplicationId,
        request: PierApi.CreateApplicationRequest
    ): Promise<PierApi.Application> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PierApiEnvironment.Production,
                `/applications/${applicationId}/approve`
            ),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.applications.approve.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.applications.approve.Response.parse(
                _response.body as serializers.applications.approve.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new PierApi.InvalidInputError(
                        await serializers.InvalidInputError.parse(
                            _response.error.body as serializers.InvalidInputError.Raw
                        )
                    );
                case 404:
                    throw new PierApi.BorrowerNotFoundError(
                        await serializers.BorrowerNotFoundError.parse(
                            _response.error.body as serializers.BorrowerNotFoundError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates the status of a credit application to `REJECTED` and returns a user readable rejection reason, to be used in the adverse action notice
     * @throws {PierApi.InvalidInputError}
     * @throws {PierApi.ApplicationNotFoundError}
     */
    public async reject(
        applicationId: PierApi.ApplicationId,
        request: PierApi.RejectRequest
    ): Promise<PierApi.Application> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PierApiEnvironment.Production,
                `/applications/${applicationId}/reject`
            ),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.applications.reject.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.applications.reject.Response.parse(
                _response.body as serializers.applications.reject.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new PierApi.InvalidInputError(
                        await serializers.InvalidInputError.parse(
                            _response.error.body as serializers.InvalidInputError.Raw
                        )
                    );
                case 404:
                    throw new PierApi.ApplicationNotFoundError(
                        await serializers.ApplicationNotFoundError.parse(
                            _response.error.body as serializers.ApplicationNotFoundError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Get an application by its id
     * @throws {PierApi.ApplicationNotFoundError}
     */
    public async get(applicationId: PierApi.ApplicationId): Promise<PierApi.Application> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PierApiEnvironment.Production,
                `/applications/${applicationId}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.applications.get.Response.parse(
                _response.body as serializers.applications.get.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new PierApi.ApplicationNotFoundError(
                        await serializers.ApplicationNotFoundError.parse(
                            _response.error.body as serializers.ApplicationNotFoundError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * List all applications associated with your account
     */
    public async getAll(): Promise<PierApi.Application[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PierApiEnvironment.Production, "/applications/"),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.applications.getAll.Response.parse(
                _response.body as serializers.applications.getAll.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PierApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
