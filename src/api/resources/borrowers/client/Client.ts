/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { PierApi } from "@fern-api/pier";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.PierApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

/**
 * Borrowers represent a legal borrower, and can either be a consumer (e.g. for personal loans and lines of credit) or a [business](notion://www.notion.so/72a5b7a8b07d4bb983ae86a6b32d6696#5261b2cf754e453c8ad40b059ac0d584) (e.g. for commercial charge cards and loans).
 * Creating a borrower (or referencing an existing one) is the first step in the Pier credit origination process.
 *
 */
export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Creates a business borrower. Business borrowers must have a unique EIN.
     * @throws {PierApi.InvalidInputError}
     * @throws {PierApi.DuplicateEinError}
     */
    public async createBusinessBorrower(request: PierApi.BusinessBorrowerRequest): Promise<PierApi.BusinessBorrower> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PierApiEnvironment.Production, "/borrowers/business"),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.borrowers.createBusinessBorrower.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.borrowers.createBusinessBorrower.Response.parse(
                _response.body as serializers.borrowers.createBusinessBorrower.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new PierApi.InvalidInputError(
                        await serializers.InvalidInputError.parse(
                            _response.error.body as serializers.InvalidInputError.Raw
                        )
                    );
                case 400:
                    throw new PierApi.DuplicateEinError(
                        await serializers.DuplicateEinError.parse(
                            _response.error.body as serializers.DuplicateEinError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Updates an existing borrower. The full borrower object needs to be supplied in the update request.
     * @throws {PierApi.InvalidInputError}
     * @throws {PierApi.DuplicateEinError}
     */
    public async updateBusinessBorrower(
        borrowerId: PierApi.BusinessBorrowerId,
        request: PierApi.BusinessBorrowerRequest
    ): Promise<PierApi.BusinessBorrower> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PierApiEnvironment.Production,
                `/borrowers/business/${borrowerId}`
            ),
            method: "PATCH",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.borrowers.updateBusinessBorrower.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.borrowers.updateBusinessBorrower.Response.parse(
                _response.body as serializers.borrowers.updateBusinessBorrower.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new PierApi.InvalidInputError(
                        await serializers.InvalidInputError.parse(
                            _response.error.body as serializers.InvalidInputError.Raw
                        )
                    );
                case 400:
                    throw new PierApi.DuplicateEinError(
                        await serializers.DuplicateEinError.parse(
                            _response.error.body as serializers.DuplicateEinError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Creates a consumer borrower. Consumer borrower's must have a unique SSN.
     * @throws {PierApi.InvalidInputError}
     * @throws {PierApi.DuplicateSsnError}
     */
    public async createConsumerBorrower(request: PierApi.ConsumerBorrowerRequest): Promise<PierApi.ConsumerBorrower> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PierApiEnvironment.Production, "/borrowers/consumer"),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.borrowers.createConsumerBorrower.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.borrowers.createConsumerBorrower.Response.parse(
                _response.body as serializers.borrowers.createConsumerBorrower.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new PierApi.InvalidInputError(
                        await serializers.InvalidInputError.parse(
                            _response.error.body as serializers.InvalidInputError.Raw
                        )
                    );
                case 400:
                    throw new PierApi.DuplicateSsnError(
                        await serializers.DuplicateSsnError.parse(
                            _response.error.body as serializers.DuplicateSsnError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * @throws {PierApi.InvalidInputError}
     * @throws {PierApi.BorrowerNotFoundError}
     */
    public async updateConsumerBorrower(
        borrowerId: PierApi.ConsumerBorrowerId,
        request: PierApi.ConsumerBorrowerRequest
    ): Promise<PierApi.ConsumerBorrower> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PierApiEnvironment.Production,
                `/borrowers/consumer/${borrowerId}`
            ),
            method: "PATCH",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.borrowers.updateConsumerBorrower.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.borrowers.updateConsumerBorrower.Response.parse(
                _response.body as serializers.borrowers.updateConsumerBorrower.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new PierApi.InvalidInputError(
                        await serializers.InvalidInputError.parse(
                            _response.error.body as serializers.InvalidInputError.Raw
                        )
                    );
                case 404:
                    throw new PierApi.BorrowerNotFoundError(
                        await serializers.BorrowerNotFoundError.parse(
                            _response.error.body as serializers.BorrowerNotFoundError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve one borrower by id
     * @throws {PierApi.BorrowerNotFoundError}
     */
    public async getBorrower(borrowerId: PierApi.ConsumerBorrowerId): Promise<PierApi.ConsumerBorrower> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PierApiEnvironment.Production,
                `/borrowers/${borrowerId}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.borrowers.getBorrower.Response.parse(
                _response.body as serializers.borrowers.getBorrower.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new PierApi.BorrowerNotFoundError(
                        await serializers.BorrowerNotFoundError.parse(
                            _response.error.body as serializers.BorrowerNotFoundError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve all borrowers associated with your account
     */
    public async getAllBorrowers(): Promise<PierApi.ConsumerBorrower[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PierApiEnvironment.Production, "/borrowers/"),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.borrowers.getAllBorrowers.Response.parse(
                _response.body as serializers.borrowers.getAllBorrowers.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PierApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
