/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { PierApi } from "@fern-api/pier";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.PierApiEnvironment | string;
        credentials?: core.Supplier<core.BasicAuth>;
    }
}

/**
 * Once an application is accepted, the final step to complete the application process is for the applicant to execute the loan agreement.
 * The loan agreement object contains a `document_url` where the agreement is hosted and can have a status of `pending_signature`, `signed`, or `expired`.
 * Loan agreements that are not signed within 24 hours expire and need to be re-created
 *
 */
export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * A loan agreement can be created for an application with a status of approved. Expect 4-8 seconds of latency
     * @throws {PierApi.ApplicationNotFoundError}
     * @throws {PierApi.DocumentCannotBeCreatedError}
     */
    public async create(request: PierApi.CreateLoanAgreementRequest): Promise<PierApi.LoanAgreement> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PierApiEnvironment.Production, "/loan_agreements/"),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.loans.create.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.loans.create.Response.parse(
                _response.body as serializers.loans.create.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new PierApi.ApplicationNotFoundError(
                        await serializers.ApplicationNotFoundError.parse(
                            _response.error.body as serializers.ApplicationNotFoundError.Raw
                        )
                    );
                case 400:
                    throw new PierApi.DocumentCannotBeCreatedError(
                        await serializers.DocumentCannotBeCreatedError.parse(
                            _response.error.body as serializers.DocumentCannotBeCreatedError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Electronically signs a loan document and updates the application's status to `accepted`
     * @throws {PierApi.ApplicationNotFoundError}
     * @throws {PierApi.DocumentCannotBeSignedError}
     */
    public async sign(
        loanAgreementId: PierApi.LoanAgreementId,
        request: PierApi.SignLoanAgreementRequest
    ): Promise<PierApi.SignLoanAgreementResponse> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PierApiEnvironment.Production,
                `/loan_agreements/${loanAgreementId}/sign`
            ),
            method: "POST",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
            body: await serializers.loans.sign.Request.json(request),
        });
        if (_response.ok) {
            return await serializers.loans.sign.Response.parse(_response.body as serializers.loans.sign.Response.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new PierApi.ApplicationNotFoundError(
                        await serializers.ApplicationNotFoundError.parse(
                            _response.error.body as serializers.ApplicationNotFoundError.Raw
                        )
                    );
                case 400:
                    throw new PierApi.DocumentCannotBeSignedError(
                        await serializers.DocumentCannotBeSignedError.parse(
                            _response.error.body as serializers.DocumentCannotBeSignedError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Retrieve a loan agreement by its id
     * @throws {PierApi.DocumentNotFoundError}
     */
    public async get(loanAgreementId: PierApi.LoanAgreementId): Promise<PierApi.LoanAgreement> {
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.PierApiEnvironment.Production,
                `/loan_agreements/${loanAgreementId}`
            ),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.loans.get.Response.parse(_response.body as serializers.loans.get.Response.Raw);
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new PierApi.DocumentNotFoundError(
                        await serializers.DocumentNotFoundError.parse(
                            _response.error.body as serializers.DocumentNotFoundError.Raw
                        )
                    );
                default:
                    throw new errors.PierApiError({
                        statusCode: _response.error.statusCode,
                        responseBody: _response.error.rawBody,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * List all loan agreements on your account
     */
    public async getAll(): Promise<PierApi.LoanAgreement[]> {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.PierApiEnvironment.Production, "/loan_agreements/"),
            method: "GET",
            headers: {
                Authorization: core.BasicAuth.toAuthorizationHeader(await core.Supplier.get(this.options.credentials)),
            },
        });
        if (_response.ok) {
            return await serializers.loans.getAll.Response.parse(
                _response.body as serializers.loans.getAll.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.PierApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.PierApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.PierApiTimeoutError();
            case "unknown":
                throw new errors.PierApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
